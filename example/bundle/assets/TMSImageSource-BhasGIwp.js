import{T as h}from"./TiledImageSource-C04IJpk-.js";import{M as o}from"./three.module-CQU0seT4.js";class g{get isMercator(){return this.scheme==="EPSG:3857"}constructor(t="EPSG:4326"){this.scheme=t,this.tileCountX=1,this.tileCountY=1,this.setScheme(t)}setScheme(t){switch(this.scheme=t,t){case"EPSG:4326":this.tileCountX=2,this.tileCountY=1;break;case"EPSG:3857":this.tileCountX=1,this.tileCountY=1;break;default:throw new Error}}convertProjectionToLatitude(t){if(this.isMercator){const e=o.mapLinear(t,0,1,-1,1);return 2*Math.atan(Math.exp(e*Math.PI))-Math.PI/2}else return o.mapLinear(t,0,1,-Math.PI/2,Math.PI/2)}convertProjectionToLongitude(t){return o.mapLinear(t,0,1,-Math.PI,Math.PI)}convertLatitudeToProjection(t){if(this.isMercator){const e=Math.log(Math.tan(Math.PI/4+t/2));return 1/2+1*e/(2*Math.PI)}else return o.mapLinear(t,-Math.PI/2,Math.PI/2,0,1)}convertLongitudeToProjection(t){return(t+Math.PI)/(2*Math.PI)}getLongitudeDerivativeAtProjection(t){return 2*Math.PI}getLatitudeDerivativeAtProjection(t){let i=t-1e-5;return i<0&&(i=t+1e-5),this.isMercator?Math.abs(this.convertProjectionToLatitude(t)-this.convertProjectionToLatitude(i))/1e-5:Math.PI}getBounds(){return[this.convertProjectionToLongitude(0),this.convertProjectionToLatitude(0),this.convertProjectionToLongitude(1),this.convertProjectionToLatitude(1)]}}class T extends h{constructor(t={}){super();const{levels:e=20,tileDimension:i=256,projection:r="EPSG:3857"}=t;this.tileDimension=i,this.levels=e,this.projection=r,this.url=null}getUrl(t,e,i){return this.url.replace(/{\s*z\s*}/gi,i).replace(/{\s*x\s*}/gi,t).replace(/{\s*(y|reverseY|-\s*y)\s*}/gi,e)}init(t){const{tiling:e,tileDimension:i,levels:r,projection:n}=this;return e.flipY=!/{\s*reverseY|-\s*y\s*}/g.test(t),e.setProjection(new g(n)),e.setBounds(...e.projection.getBounds()),e.generateLevels(r,e.projection.tileCountX,e.projection.tileCountY,{tilePixelWidth:i,tilePixelHeight:i}),this.url=t,Promise.resolve()}}class b extends h{constructor(){super(),this.tileSets=null,this.extension=null,this.url=null}getUrl(t,e,i){const{url:r,extension:n,tileSets:l,tiling:a}=this;return new URL(`${parseInt(l[i-a.minLevel].href)}/${t}/${e}.${n}`,r).toString()}init(t){return this.fetchData(new URL("tilemapresource.xml",t),this.fetchOptions).then(e=>e.text()).then(e=>{const{tiling:i}=this,r=new DOMParser().parseFromString(e,"text/xml"),n=r.querySelector("BoundingBox"),l=r.querySelector("Origin"),a=r.querySelector("TileFormat"),u=[...r.querySelector("TileSets").querySelectorAll("TileSet")].map(s=>({href:parseInt(s.getAttribute("href")),unitsPerPixel:parseFloat(s.getAttribute("units-per-pixel")),order:parseInt(s.getAttribute("order"))})).sort((s,v)=>s.order-v.order),P=parseFloat(n.getAttribute("minx"))*o.DEG2RAD,p=parseFloat(n.getAttribute("maxx"))*o.DEG2RAD,m=parseFloat(n.getAttribute("miny"))*o.DEG2RAD,S=parseFloat(n.getAttribute("maxy"))*o.DEG2RAD,x=parseFloat(l.getAttribute("x"))*o.DEG2RAD,d=parseFloat(l.getAttribute("y"))*o.DEG2RAD,M=parseInt(a.getAttribute("width")),j=parseInt(a.getAttribute("height")),I=a.getAttribute("extension"),L=r.querySelector("SRS").textContent;this.extension=I,this.url=t,this.tileSets=u,i.setProjection(new g(L)),i.setOrigin(x,d),i.setBounds(P,m,p,S),u.forEach(({order:s})=>{i.setLevel(s,{tileCountX:i.projection.tileCountX*2**s,tilePixelWidth:M,tilePixelHeight:j})})})}}export{g as P,b as T,T as X};
//# sourceMappingURL=TMSImageSource-BhasGIwp.js.map
